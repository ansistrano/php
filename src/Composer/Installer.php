<?php

namespace Ansistrano\Composer;

use Composer\Composer;
use Composer\Installer\BinaryInstaller;
use Composer\IO\IOInterface;
use Composer\Package\PackageInterface;
use Composer\Installer\LibraryInstaller;
use Composer\Repository\InstalledRepositoryInterface;
use Composer\Util\Filesystem;

class Installer extends LibraryInstaller
{
    const ANSISTRANO_TEMPLATE = 'ansistrano/ansistrano-template-';

    public function __construct(IOInterface $io, Composer $composer, $type = 'library', Filesystem $filesystem = null, BinaryInstaller $binaryInstaller = null)
    {
        parent::__construct($io, $composer, $type, $filesystem, $binaryInstaller);
    }

    public function supports($packageType)
    {
        return parent::supports($packageType); // TODO: Change the autogenerated stub
    }

    public function isInstalled(InstalledRepositoryInterface $repo, PackageInterface $package)
    {
        return parent::isInstalled($repo, $package); // TODO: Change the autogenerated stub
    }

    public function install(InstalledRepositoryInterface $repo, PackageInterface $package)
    {
        parent::install($repo, $package); // TODO: Change the autogenerated stub

        $basePath = '/Users/goodwines/Development/rigorguild.com';
        $source = __DIR__ . '/../../.ansistrano';
        $target = $basePath . '/.ansistrano';

        $this->filesystem->copy($source, $target);
    }

    public function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)
    {
        parent::update($repo, $initial, $target); // TODO: Change the autogenerated stub
    }

    public function uninstall(InstalledRepositoryInterface $repo, PackageInterface $package)
    {
        parent::uninstall($repo, $package); // TODO: Change the autogenerated stub

        $basePath = '/Users/goodwines/Development/rigorguild.com';
        $target = $basePath . '/.ansistrano';

        $this->filesystem->removeDirectoryPhp($target);
    }

    public function ensureBinariesPresence(PackageInterface $package)
    {
        parent::ensureBinariesPresence($package); // TODO: Change the autogenerated stub
    }

    protected function getPackageBasePath(PackageInterface $package)
    {
        return parent::getPackageBasePath($package); // TODO: Change the autogenerated stub
    }

    protected function installCode(PackageInterface $package)
    {
        parent::installCode($package); // TODO: Change the autogenerated stub
    }

    protected function updateCode(PackageInterface $initial, PackageInterface $target)
    {
        return parent::updateCode($initial, $target); // TODO: Change the autogenerated stub
    }

    protected function removeCode(PackageInterface $package)
    {
        parent::removeCode($package); // TODO: Change the autogenerated stub
    }

    protected function initializeVendorDir()
    {
        parent::initializeVendorDir(); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritDoc}
     */
    public function getInstallPath(PackageInterface $package)
    {
        return parent::getInstallPath($package);
//        $prefix = substr($package->getPrettyName(), 0, strlen(self::ANSISTRANO_TEMPLATE));
//        if (self::ANSISTRANO_TEMPLATE !== $prefix) {
//            throw new \InvalidArgumentException(
//                'Unable to install template, Ansistrano templates '
//                .'should always start their package name with '
//                .'"ansistrano/ansistrano-template-"'
//            );
//        }
//
//        $suffix = substr($package->getPrettyName(), strlen(self::ANSISTRANO_TEMPLATE));
//
//        return '.ansistrano/templates/'.$suffix;
    }
//
//    /**
//     * {@inheritDoc}
//     */
//    public function supports($packageType)
//    {
//        return 'ansistrano-template' === $packageType;
//    }
}
